from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command

from resume_scraper.services.resume_service import ResumeService
from resume_scraper.scraper.work_ua_scraper import WorkUaScraper
from resume_scraper.parser.work_ua_parser import ResumeParser
from resume_scraper.scorer.scorer import CandidateScorer

BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_state = {}


async def fetch_top_resumes(keywords, budget, endpoint):
    scraper = WorkUaScraper()
    parser = ResumeParser()
    scorer = CandidateScorer(keywords=keywords, budget=budget)
    service = ResumeService(scraper, parser, scorer)
    try:
        resumes = service.fetch_and_process_resumes(endpoint)
        return resumes[:5]
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ: {e}")
        return None


@dp.message_handler(Command("start"))
async def start_command(message: types.Message):
    user_state[message.from_user.id] = {}
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("Python Junior", callback_data="endpoint:/resumes-python-junior/"),
        InlineKeyboardButton("Python Developer", callback_data="endpoint:/resumes-python/"),
        InlineKeyboardButton("QA Engineer", callback_data="endpoint:/resumes-qa/"),
    )
    await message.reply(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞–∫–∞–Ω—Å—ñ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ó—ó –≤—Ä—É—á–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Python Senior):",
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("endpoint:"))
async def set_endpoint_callback(callback_query: types.CallbackQuery):
    endpoint = callback_query.data.split(":")[1]
    user_state[callback_query.from_user.id]["endpoint"] = endpoint
    await callback_query.answer(f"–û–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {endpoint}")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Python, Django):")


@dp.message_handler(lambda msg: "endpoint" not in user_state.get(msg.from_user.id, {}))
async def set_endpoint_manual(message: types.Message):
    user_input = message.text.strip()
    endpoint = f"/resumes-{user_input.replace(' ', '-').lower()}/"
    user_state[message.from_user.id]["endpoint"] = endpoint
    await message.reply(f"–û–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {user_input}. –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Python, Django):")


@dp.message_handler(lambda msg: msg.from_user.id in user_state and "keywords" not in user_state[msg.from_user.id])
async def capture_keywords(message: types.Message):
    keywords = message.text.split(",")
    user_state[message.from_user.id]["keywords"] = keywords
    await message.reply("–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100000):")


@dp.message_handler(lambda msg: msg.from_user.id in user_state and "budget" not in user_state[msg.from_user.id])
async def capture_budget(message: types.Message):
    try:
        budget = int(message.text)
        user_state[message.from_user.id]["budget"] = budget
        await message.reply("–ë—é–¥–∂–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /find, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫.")
    except ValueError:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π –±—é–¥–∂–µ—Ç.")


@dp.message_handler(Command("find"))
async def find_resumes(message: types.Message):
    user_data = user_state.get(message.from_user.id, {})
    if not all(k in user_data for k in ("endpoint", "keywords", "budget")):
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–¥–∞–π—Ç–µ –≤—Å—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.")
        return

    endpoint = user_data["endpoint"]
    keywords = user_data["keywords"]
    budget = user_data["budget"]

    await message.reply("–®—É–∫–∞—é —Ä–µ–∑—é–º–µ... –ó–∞—á–µ–∫–∞–π—Ç–µ!")

    resumes = await fetch_top_resumes(keywords, budget, endpoint)
    if not resumes:
        await message.reply("–†–µ–∑—é–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É.")
        return

    for resume in resumes:
        resume_text = (
            f"<b>{resume['job_title']}</b>\n"
            f"üîó <a href='{resume['resume_link']}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—é–º–µ</a>\n"
            f"üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: {resume.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {resume['posted_time']}\n"
            f"üíº –î–æ—Å–≤—ñ–¥: {resume.get('work_experience', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {resume.get('salary', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        )
        await message.reply(resume_text, parse_mode=ParseMode.HTML)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)